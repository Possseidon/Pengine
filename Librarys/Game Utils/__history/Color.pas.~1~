unit Color;

{$IFDEF FPC}
{$mode Delphi}
{$ENDIF}

interface

uses
  Graphics, dglOpenGL;

type
  TColor = record
    R, G, B, A: GLfloat;

    class operator Add(A, B: TColor): TColor;
    class operator Subtract(A, B: TColor): TColor;
    class operator Multiply(A, B: TColor): TColor;
    class operator LogicalNot(A: TColor): TColor;
    class operator Equal(A, B: TColor): Boolean;
    class operator NotEqual(A, B: TColor): Boolean;

    class function New(Color: TColor; A: GLfloat = 1): TColor; overload; static;
    class function New(R, G, B: GLfloat; A: GLfloat = 1): TColor; overload; static;

    function ToWinColor: TColor;

    procedure glColor;
  end;

implementation

uses
  Math;

{ TColor }

class operator TColor.Add(A, B: TColor): TColor;
begin
  Result.R := Min(A.R + B.R, 1);
  Result.G := Min(A.G + B.G, 1);
  Result.B := Min(A.B + B.B, 1);
end;

class operator TColor.Equal(A, B: TColor): Boolean;
begin
  Result := (A.R = B.R) and (A.G = B.G) and (A.B = B.B);
end;

procedure TColor.glColor;
begin
  glColor4fv(@Self);
end;

class operator TColor.LogicalNot(A: TColor): TColor;
begin
  Result.R := 1 - A.R;
  Result.G := 1 - A.G;
  Result.B := 1 - A.B;
end;

class operator TColor.Multiply(A, B: TColor): TColor;
begin
  Result.R := Min(A.R * B.R, 1);
  Result.G := Min(A.G * B.G, 1);
  Result.B := Min(A.B * B.B, 1);
end;

class function TColor.New(Color: TColor; A: GLfloat): TColor;
begin
  Result.R := Color and $FF / $FF;
  Result.G := Color shr 8 and $FF / $FF;
  Result.B := Color shr 16 and $FF / $FF;
end;

class function TColor.New(R, G, B, A: GLfloat): TColor;
begin
  Result.R := R;
  Result.G := G;
  Result.B := B;
  Result.A := A;
end;

class operator TColor.NotEqual(A, B: TColor): Boolean;
begin
  Result := (A.R <> B.R) or (A.G <> B.G) or (A.B <> B.B);
end;

class operator TColor.Subtract(A, B: TColor): TColor;
begin
  Result.R := Max(A.R - B.R, 0);
  Result.G := Max(A.G - B.G, 0);
  Result.B := Max(A.B - B.B, 0);
end;

function TColor.ToWinColor: TColor;
begin
  Result := Floor(R * $FF) or Floor(G * $FF) shl 8 or Floor(B * $FF) shl 16;
end;

end.
