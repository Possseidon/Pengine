unit FileHandling;

interface

uses
  Classes, SysUtils, VectorGeometry;

type

  { TFileHandler }

  TFileHandler = class abstract
  private
    FFileStream: TFileStream;
  protected
    property FileStream: TFileStream read FFileStream;
    function GetFileMode: Cardinal; virtual; abstract;
  public
    constructor Create(AFileName: String);
    destructor Destroy; override;
  end;

  { TFileSaver }

  TFileSaver = class (TFileHandler)
  protected
    function GetFileMode: Cardinal; override;

  public
    procedure Add(const AData; ASize: Integer); overload;

    procedure Add(ANumber: Byte); overload;
    procedure Add(AArray: array of const); overload;

    procedure Add(ANumber: Word); overload;
    procedure Add(AArray: array of Word); overload;

    procedure Add(ANumber: Integer); overload;
    procedure Add(AArray: array of Integer); overload;

    procedure Add(ANumber: Int64); overload;
    procedure Add(AArray: array of Int64); overload;

    procedure Add(ANumber: Single); overload;
    procedure Add(AArray: array of Single); overload;

    procedure Add(ANumber: Double); overload;
    procedure Add(AArray: array of Double); overload;

    procedure Add(AString: String); overload;

  end;

  { TFileLoader }

  TFileLoader = class (TFileHandler)
  protected
    function GetFileMode: Cardinal; override;

  public
    procedure Get(var AData; ASize: Integer); overload;

    procedure Get(var ANumber: Byte); overload;
    procedure Get(var AArray: array of Byte); overload;

    procedure Get(var ANumber: Word); overload;
    procedure Get(var AArray: array of Word); overload;

    procedure Get(var ANumber: Integer); overload;
    procedure Get(var AArray: array of Integer); overload;

    procedure Get(var ANumber: Int64); overload;
    procedure Get(var AArray: array of Int64); overload;

    procedure Get(var ANumber: Single); overload;
    procedure Get(var AArray: array of Single); overload;

    procedure Get(var ANumber: Double); overload;
    procedure Get(var AArray: array of Double); overload;

    procedure Get(var AString: String); overload;
  end;

implementation

{ TFileLoader }

function TFileLoader.GetFileMode: Cardinal;
begin
  Result := fmOpenRead;
end;

procedure TFileLoader.Get(var AData; ASize: Integer);
begin
  FileStream.Read(AData, ASize);
end;

procedure TFileLoader.Get(var ANumber: Byte);
begin
  FileStream.Read(ANumber, SizeOf(Byte));
end;

procedure TFileLoader.Get(var AArray: array of Byte);
var
  I: Integer;
begin
  SetLength(AArray, FileStream.ReadDWord);
  for I := 0 to Length(AArray) do
    Get(AArray[I]);
end;

procedure TFileLoader.Get(var ANumber: Word);
begin
  FileStream.Read(ANumber, SizeOf(Word));
end;

procedure TFileLoader.Get(var AArray: array of Word);
begin

end;

procedure TFileLoader.Get(var ANumber: Integer);
begin
  FileStream.Read(ANumber, SizeOf(Integer));
end;

procedure TFileLoader.Get(var AArray: array of Integer);
begin

end;

procedure TFileLoader.Get(var ANumber: Int64);
begin
  FileStream.Read(ANumber, SizeOf(Int64));
end;

procedure TFileLoader.Get(var AArray: array of Int64);
begin

end;

procedure TFileLoader.Get(var ANumber: Single);
begin
  FileStream.Read(ANumber, SizeOf(Single));
end;

procedure TFileLoader.Get(var AArray: array of Single);
begin

end;

procedure TFileLoader.Get(var ANumber: Double);
begin
  FileStream.Read(ANumber, SizeOf(Double));
end;

procedure TFileLoader.Get(var AArray: array of Double);
begin

end;

procedure TFileLoader.Get(var AString: String);
begin
  AString := FileStream.ReadAnsiString;
end;

{ TFileHandler }

constructor TFileHandler.Create(AFileName: String);
begin
  FFileStream := TFileStream.Create(AFileName, GetFileMode);
end;

destructor TFileHandler.Destroy;
begin
  FFileStream.Free;
  inherited Destroy;
end;

{ TFileSaver }

function TFileSaver.GetFileMode: Cardinal;
begin
  Result := fmCreate or fmOpenWrite;
end;

procedure TFileSaver.Add(const AData; ASize: Integer);
begin
  FileStream.WriteBuffer(AData, ASize);
end;

procedure TFileSaver.Add(ANumber: Byte);
begin
  FileStream.WriteBuffer(ANumber, SizeOf(Byte));
end;

procedure TFileSaver.Add(AArray: array of Byte);
var
  Count: Cardinal;
begin
  Count := Length(AArray);
  FileStream.WriteDWord(Count);
  FileStream.WriteBuffer(AArray[0], Count * SizeOf(Byte));
end;

procedure TFileSaver.Add(ANumber: Word);
begin
  FileStream.WriteBuffer(ANumber, SizeOf(Word));
end;

procedure TFileSaver.Add(AArray: array of Word);
var
  Count: Cardinal;
begin
  Count := Length(AArray);
  FileStream.WriteDWord(Count);
  FileStream.WriteBuffer(AArray[0], Count * SizeOf(Word));
end;

procedure TFileSaver.Add(ANumber: Integer);
begin
  FileStream.WriteBuffer(ANumber, SizeOf(ANumber));
end;

procedure TFileSaver.Add(AArray: array of Integer);
var
  Count: Cardinal;
begin
  Count := Length(AArray);
  FileStream.WriteDWord(Count);
  FileStream.WriteBuffer(AArray[0], Count * SizeOf(Integer));
end;

procedure TFileSaver.Add(ANumber: Int64);
begin
  FileStream.WriteBuffer(ANumber, SizeOf(Int64));
end;

procedure TFileSaver.Add(AArray: array of Int64);
var
  Count: Cardinal;
begin
  Count := Length(AArray);
  FileStream.WriteDWord(Count);
  FileStream.WriteBuffer(AArray[0], Count * SizeOf(Int64));
end;

procedure TFileSaver.Add(ANumber: Single);
begin
  FileStream.WriteBuffer(ANumber, SizeOf(Single));
end;

procedure TFileSaver.Add(AArray: array of Single);
var
  Count: Cardinal;
begin
  Count := Length(AArray);
  FileStream.WriteDWord(Count);
  FileStream.WriteBuffer(AArray[0], Count * SizeOf(Single));
end;

procedure TFileSaver.Add(ANumber: Double);
begin
  FileStream.WriteBuffer(ANumber, SizeOf(Double));
end;

procedure TFileSaver.Add(AArray: array of Double);
var
  Count: Cardinal;
begin
  Count := Length(AArray);
  FileStream.WriteDWord(Count);
  FileStream.WriteBuffer(AArray[0], Count * SizeOf(Double));
end;

procedure TFileSaver.Add(AString: String);
begin
  FileStream.WriteAnsiString(AString);
end;

end.

